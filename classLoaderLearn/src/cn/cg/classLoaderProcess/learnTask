--解析 Java 类加载机制(JVM 虚拟机执行 class 字节码的过程)
  --类加载机制七个阶段
    --加载:将class文件加载到内存中去.
    --验证:当代码被加载到内存中后,虚拟机会对数据进行校验,看看数据是否符合规范
        --JVM规范校验:是否能够当前jvm所处理,
                      文件是否是以 0x cafe bene开头，主次版本号是否在当前虚拟机处理范围之内等。
        --代码逻辑校验:确保 JVM 运行该字节码文件后不会出现致命错误,
                       例如:一个方法要求传入 int 类型的参数，但是使用它的时候却传入了一个 String 类型的参数.
    --准备:JVM 便会开始为类变量分配内存并初始化
        --内存分配的对象:对类变量分配内存空间
                        例如:public static int factor = 3;(a)
                        public String website = "www.cnblogs.com/chanshuyi";(b)
                        对a分配,对b不分配
        --初始化的类型:分配内存后并初始化
                        例如:public static int number = 3;
                        在准备阶段,number = 0,而非3(重点)
                        特例:public static final int number = 3;
                        因为只允许赋值一次,所以number = 3;
    --解析:当通过准备阶段之后，JVM 针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7
            类引用进行解析,。这个阶段的主要任务是将其在常量池中的符号引用替换成直接其在内存中的直接引用。
    --初始化:用户定义的 Java 程序代码才真正开始执行,在这个阶段，JVM 会根据语句执行顺序对类对象进行初始化
         --触发条件1:遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，
                     则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候、
                     读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）的时候，
                     以及调用一个类的静态方法的时候
         --触发条件2:使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行过初始化，
                    则需要先触发其初始化。
         --触发条件3:当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），
                     虚拟机会先初始化这个主类。
         --触发条件4:当使用 JDK1.7 动态语言支持时，如果一个 java.lang.invoke.MethodHandle实例最后的解析结果
                     REF_getstatic,REF_putstatic,REF_invokeStatic 的方法句柄，
                     并且这个方法句柄所对应的类没有进行初始化，则需要先出触发其初始化。
    --使用:JVM 完成初始化阶段之后，JVM 便开始从入口方法开始执行用户的程序代码。
    --卸载:当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存。
案例:
    --cn.cg.classLoaderProcess.Book
    --cn.cg.classLoaderProcess.InitializationDemo1
    --cn.cg.classLoaderProcess.InitializationDemo2
    --cn.cg.classLoaderProcess.Book1
方法论:从上面几个例子可以看出，分析一个类的执行顺序大概可以按照如下步骤：
    --确定类变量的初始值。在类加载的准备阶段，JVM 会为类变量初始化零值，这时候类变量会有一个初始的零值。
        如果是被 final 修饰的类变量，则直接会被初始成用户想要的值。
    --初始化入口方法。当进入类加载的初始化阶段后，JVM 会寻找整个 main 方法入口，
        从而初始化 main 方法所在的整个类。当需要对一个类进行初始化时，
        会首先初始化类构造器（），之后初始化对象构造器（）。
    --初始化类构造器。JVM 会按顺序收集类变量的赋值语句、静态代码块，最终组成类构造器由 JVM 执行。
    --初始化对象构造器。JVM 会按照收集成员变量的赋值语句、普通代码块，最后收集构造方法，
        将它们组成对象构造器，最终由 JVM 执行。
    --如果在初始化 main 方法所在类的时候遇到了其他类的初始化，那么就先加载对应的类，
        加载完成之后返回。如此反复循环，最终返回 main 方法所在类。

参考地址:http://bugstack.cn/read.php?tid=9&fid=6